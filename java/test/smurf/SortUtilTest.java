package smurf;

import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;

public class SortUtilTest {
  private int[] unsorted;
  private int[] sorted;

  @Before public void setup() {
    unsorted = new int[] {10,141,139,981,463,650,724,88,893,581,561,915,769,163,597,362,27,987,516,143,383,71,391,359,467,225,754,808,527,195,734,267,28,890,958,661,644,436,775,402,685,360,504,607,309,398,912,929,152,87,707,47,515,403,481,752,831,525,180,227,942,938,932,204,602,483,386,102,648,32,96,336,18,86,905,700,239,491,711,415,104,875,904,990,705,465,835,262,457,546,381,217,368,901,717,386,202,59,695,714,876,99,989,464,753,506,700,747,77,85,192,187,841,787,969,892,245,927,813,448,674,588,377,592,862,197,244,293,815,406,96,291,896,357,422,136,857,726,203,883,128,736,114,141,775,0,206,991,440,46,554,983,433,460,941,594,790,536,314,500,964,646,119,969,240,656,857,93,967,730,552,973,875,332,402,707,711,135,606,756,646,246,111,915,17,947,189,907,174,100,548,87,500,173,505,568,262,710,871,542,553,995,156,32,996,520,552,361,708,197,338,363,73,881,941,787,843,545,186,85,913,746,171,86,499,426,580,618,385,292,309,588,763,808,755,690,642,716,456,747,732,340,578,832,416,242,582,128,222,659,59,346,755,214,910,240,850,78,58,77,949,551,372,732,974,192,956,689,56,107,730,944,378,685,398,952,770,867,683,26,509,826,724,885,46,304,663,775,886,167,767,668,345,696,817,793,846,181,779,935,282,297,940,937,507,457,231,796,733,872,267,637,655,853,473,711,32,912,395,980,775,32,884,101,918,639,949,736,649,908,357,639,748,708,979,457,875,718,401,52,577,656,610,155,661,893,262,768,639,460,999,555,243,663,302,332,578,302,306,703,549,827,747,844,704,406,139,190,196,378,513,46,264,547,898,503,821,796,652,724,52,828,420,848,358,98,464,419,600,666,876,965,557,619,599,0,971,611,171,456,656,425,491,413,344,413,913,305,99,193,235,453,674,558,205,739,821,462,996,275,341,711,322,856,647,141,254,554,44,121,271,236,59,212,882,137,498,722,947,845,293,486,470,127,195,421,668,671,61,663,327,299,456,697,176,517,423,331,341,378,172,514,902,714,288,27,868,458,618,801,451,12,995,228,996,327,543,486,486,505,632,622,788,162,934,494,802,394,351,663,315,824,329,62,720,513,955,98,967,477,828,674,789,162,652,846,25,223,307,360,426,835,397,246,854,112,604,388,867,612,91,995,258,108,962,337,87,996,501,934,194,586,347,907,443,932,241,160,129,414,273,461,866,675,951,903,631,531,662,754,442,892,59,518,1,834,717,92,101,757,251,302,423,978,28,326,110,815,594,56,849,959,962,594,525,818,693,24,276,28,456,651,777,904,322,251,539,865,993,930,315,75,20,773,524,658,834,384,658,262,768,404,795,78,731,880,262,467,897,724,800,596,163,875,82,94,388,198,948,827,640,99,324,739,542,638,483,155,181,298,944,115,293,821,695,236,615,351,568,961,746,870,979,266,580,833,348,447,555,139,220,286,972,392,175,697,740,439,659,692,539,736,956,555,593,976,817,392,790,852,732,584,199,275,50,746,950,724,615,490,801,694,758,806,980,701,636,306,401,453,147,237,20,185,913,650,804,387,56,80,61,905,466,254,656,722,378,998,206,531,637,356,197,788,572,705,559,354,920,81,99,512,447,587,500,59,757,214,591,555,710,528,846,619,922,809,515,695,233,521,918,68,995,912,760,382,617,641,922,411,47,677,196,778,795,280,675,497,40,157,434,86,149,449,715,458,855,687,293,14,254,532,787,990,257,427,920,200,48,8,444,731,59,807,546,249,172,55,872,229,72,426,929,757,554,955,908,321,145,801,869,42,522,625,403,106,127,597,275,243,888,330,746,723,113,455,741,70,25,661,962,88,957,750,72,49,873,624,217,37,522,608,899,302,291,815,590,768,660,865,543,234,839,638,242,682,181,708,122,170,130,970,659,484,590,973,456,157,542,285,771,153,510,5,93,584,326,764,506,718,262,871,89,270,621,395,245,254,876,864,832,737,68,26,76,834,351,508,667,36,344,426,862,756,974,429,614,469,617,541,975,905,91,140,643,996,215,252,301,284,629,378,882,22,70,169,578,681,536,727,20,475,227,244,892,837,583,414,686,258,751,485,718,104,65,869,523,786,555,322,335,83,518,751,546,539,689,489,125,458,258,985,736,121,857,147,49,346,309,780,946,466,336,417,66,489,435,150,976,178,542,876,916,829,558,291,354,531,879,323,609,502,151,486,906,407,174,671,37,99,559,91,284,234,903,312,761,424,851,951,144,711,388,769,744};
    sorted = new int[] {0, 0, 1, 5, 8, 10, 12, 14, 17, 18, 20, 20, 20, 22, 24, 25, 25, 26, 26, 27, 27, 28, 28, 28, 32, 32, 32, 32, 36, 37, 37, 40, 42, 44, 46, 46, 46, 47, 47, 48, 49, 49, 50, 52, 52, 55, 56, 56, 56, 58, 59, 59, 59, 59, 59, 59, 61, 61, 62, 65, 66, 68, 68, 70, 70, 71, 72, 72, 73, 75, 76, 77, 77, 78, 78, 80, 81, 82, 83, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 89, 91, 91, 91, 92, 93, 93, 94, 96, 96, 98, 98, 99, 99, 99, 99, 99, 100, 101, 101, 102, 104, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 119, 121, 121, 122, 125, 127, 127, 128, 128, 129, 130, 135, 136, 137, 139, 139, 139, 140, 141, 141, 141, 143, 144, 145, 147, 147, 149, 150, 151, 152, 153, 155, 155, 156, 157, 157, 160, 162, 162, 163, 163, 167, 169, 170, 171, 171, 172, 172, 173, 174, 174, 175, 176, 178, 180, 181, 181, 181, 185, 186, 187, 189, 190, 192, 192, 193, 194, 195, 195, 196, 196, 197, 197, 197, 198, 199, 200, 202, 203, 204, 205, 206, 206, 212, 214, 214, 215, 217, 217, 220, 222, 223, 225, 227, 227, 228, 229, 231, 233, 234, 234, 235, 236, 236, 237, 239, 240, 240, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 249, 251, 251, 252, 254, 254, 254, 254, 257, 258, 258, 258, 262, 262, 262, 262, 262, 262, 264, 266, 267, 267, 270, 271, 273, 275, 275, 275, 276, 280, 282, 284, 284, 285, 286, 288, 291, 291, 291, 292, 293, 293, 293, 293, 297, 298, 299, 301, 302, 302, 302, 302, 304, 305, 306, 306, 307, 309, 309, 309, 312, 314, 315, 315, 321, 322, 322, 322, 323, 324, 326, 326, 327, 327, 329, 330, 331, 332, 332, 335, 336, 336, 337, 338, 340, 341, 341, 344, 344, 345, 346, 346, 347, 348, 351, 351, 351, 354, 354, 356, 357, 357, 358, 359, 360, 360, 361, 362, 363, 368, 372, 377, 378, 378, 378, 378, 378, 381, 382, 383, 384, 385, 386, 386, 387, 388, 388, 388, 391, 392, 392, 394, 395, 395, 397, 398, 398, 401, 401, 402, 402, 403, 403, 404, 406, 406, 407, 411, 413, 413, 414, 414, 415, 416, 417, 419, 420, 421, 422, 423, 423, 424, 425, 426, 426, 426, 426, 427, 429, 433, 434, 435, 436, 439, 440, 442, 443, 444, 447, 447, 448, 449, 451, 453, 453, 455, 456, 456, 456, 456, 456, 457, 457, 457, 458, 458, 458, 460, 460, 461, 462, 463, 464, 464, 465, 466, 466, 467, 467, 469, 470, 473, 475, 477, 481, 483, 483, 484, 485, 486, 486, 486, 486, 489, 489, 490, 491, 491, 494, 497, 498, 499, 500, 500, 500, 501, 502, 503, 504, 505, 505, 506, 506, 507, 508, 509, 510, 512, 513, 513, 514, 515, 515, 516, 517, 518, 518, 520, 521, 522, 522, 523, 524, 525, 525, 527, 528, 531, 531, 531, 532, 536, 536, 539, 539, 539, 541, 542, 542, 542, 542, 543, 543, 545, 546, 546, 546, 547, 548, 549, 551, 552, 552, 553, 554, 554, 554, 555, 555, 555, 555, 555, 557, 558, 558, 559, 559, 561, 568, 568, 572, 577, 578, 578, 578, 580, 580, 581, 582, 583, 584, 584, 586, 587, 588, 588, 590, 590, 591, 592, 593, 594, 594, 594, 596, 597, 597, 599, 600, 602, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 615, 617, 617, 618, 618, 619, 619, 621, 622, 624, 625, 629, 631, 632, 636, 637, 637, 638, 638, 639, 639, 639, 640, 641, 642, 643, 644, 646, 646, 647, 648, 649, 650, 650, 651, 652, 652, 655, 656, 656, 656, 656, 658, 658, 659, 659, 659, 660, 661, 661, 661, 662, 663, 663, 663, 663, 666, 667, 668, 668, 671, 671, 674, 674, 674, 675, 675, 677, 681, 682, 683, 685, 685, 686, 687, 689, 689, 690, 692, 693, 694, 695, 695, 695, 696, 697, 697, 700, 700, 701, 703, 704, 705, 705, 707, 707, 708, 708, 708, 710, 710, 711, 711, 711, 711, 711, 714, 714, 715, 716, 717, 717, 718, 718, 718, 720, 722, 722, 723, 724, 724, 724, 724, 724, 726, 727, 730, 730, 731, 731, 732, 732, 732, 733, 734, 736, 736, 736, 736, 737, 739, 739, 740, 741, 744, 746, 746, 746, 746, 747, 747, 747, 748, 750, 751, 751, 752, 753, 754, 754, 755, 755, 756, 756, 757, 757, 757, 758, 760, 761, 763, 764, 767, 768, 768, 768, 769, 769, 770, 771, 773, 775, 775, 775, 775, 777, 778, 779, 780, 786, 787, 787, 787, 788, 788, 789, 790, 790, 793, 795, 795, 796, 796, 800, 801, 801, 801, 802, 804, 806, 807, 808, 808, 809, 813, 815, 815, 815, 817, 817, 818, 821, 821, 821, 824, 826, 827, 827, 828, 828, 829, 831, 832, 832, 833, 834, 834, 834, 835, 835, 837, 839, 841, 843, 844, 845, 846, 846, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 857, 857, 862, 862, 864, 865, 865, 866, 867, 867, 868, 869, 869, 870, 871, 871, 872, 872, 873, 875, 875, 875, 875, 876, 876, 876, 876, 879, 880, 881, 882, 882, 883, 884, 885, 886, 888, 890, 892, 892, 892, 893, 893, 896, 897, 898, 899, 901, 902, 903, 903, 904, 904, 905, 905, 905, 906, 907, 907, 908, 908, 910, 912, 912, 912, 913, 913, 913, 915, 915, 916, 918, 918, 920, 920, 922, 922, 927, 929, 929, 930, 932, 932, 934, 934, 935, 937, 938, 940, 941, 941, 942, 944, 944, 946, 947, 947, 948, 949, 949, 950, 951, 951, 952, 955, 955, 956, 956, 957, 958, 959, 961, 962, 962, 962, 964, 965, 967, 967, 969, 969, 970, 971, 972, 973, 973, 974, 974, 975, 976, 976, 978, 979, 979, 980, 980, 981, 983, 985, 987, 989, 990, 990, 991, 993, 995, 995, 995, 995, 996, 996, 996, 996, 996, 998, 999,
};
  }
  
  @Test public void bubblesort_sorts() {
    SortUtil.bubblesort(unsorted);
    assertTrue(Arrays.toString(unsorted), Arrays.equals(sorted, unsorted));
  }

  @Test public void mergesort_sorts_large_array() {
    SortUtil.mergesort(unsorted);
    assertTrue(Arrays.toString(unsorted), Arrays.equals(sorted, unsorted));
  }
  
  @Test public void mergesort_sorts_small_array() {
    unsorted = new int[] {6,88,3,2,8,0,0,9,8,6,4,32,7};
    unsorted = SortUtil.mergesort(unsorted);
    assertTrue(Arrays.toString(unsorted), 
        Arrays.equals(new int[] { 0,0,2,3,4,6,6,7,8,8,9,32,88 }, unsorted));
  }

}
